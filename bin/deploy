#!/usr/bin/env ruby

# Application root
APP_ROOT = "#{File.dirname(File.expand_path(__FILE__))}/.."

# This is set to the directory where deploy is run from
VIRTUAL_APP_ROOT = "#{File.expand_path(File.new(".").path)}"

$: << "#{APP_ROOT}/lib"

# Require standard files
require "deploy/config"
require "deploy/base"
require "deploy/remote_commands"
require "deploy/utils"
require 'optparse'

# Parse the options
options = {}
op = OptionParser.new do |opts|
  opts.banner = "Usage: example.rb [options]"
  opts.on("-r", "--recipe RECIPE", "The recipe file")             { |r| options[:recipe] = r      }
  opts.on("-e", "--environment ENV", "Environment to execute in") { |e| options[:environment] = e }
  opts.on("-m", "--method METHOD", "The method to run")           { |m| options[:method] = m      }
  opts.on("-c", "--config CONFIG", "Path to custome config")      { |c| options[:config] = c      }
end
op.parse!

# Check whether we have the minimum set of options
[:recipe, :environment, :method].each do |param|
  unless options.keys.include?(param)
    puts op.summarize
    exit(1)
  end
end

# Assaign the parsed options to local variables
recipe      = options[:recipe]
env         = options[:environment]
method      = options[:method]
config_file = options[:config]

# Set the configuration options
c = ::Deploy::Config.new
c.set :env, env
c.config_environment
c.config_custom(config_file) if config_file

# Load the recipe
begin
  require "deploy/recipes/#{recipe}"
  r = eval("::Deploy::Recipes::#{Utils.capitalize(recipe)}")
rescue
  # The recipe that was specified does not exist in the default recipes
end

custom_recipe = "#{VIRTUAL_APP_ROOT}/deploy/recipes/#{recipe}.rb"

if File.exists?(custom_recipe)
  require custom_recipe
  r = eval("::#{Utils.capitalize(recipe)}")
end

r.send(method.to_sym, c)

r.push!

